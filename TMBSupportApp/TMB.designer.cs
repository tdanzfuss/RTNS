#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TMBSupportApp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TMB")]
	public partial class TMBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertBankUser(BankUser instance);
    partial void UpdateBankUser(BankUser instance);
    partial void DeleteBankUser(BankUser instance);
    #endregion
		
		public TMBDataContext() : 
				base(global::TMBSupportApp.Properties.Settings.Default.TMBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TMBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TMBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TMBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TMBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Bank> Banks
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<BankUser> BankUsers
		{
			get
			{
				return this.GetTable<BankUser>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bank")]
	public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Code;
		
		private string _InternalID;
		
		private string _SFNName;
		
		private string _FDCName;
		
		private System.Nullable<int> _Status;
		
		private EntitySet<BankUser> _BankUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnInternalIDChanging(string value);
    partial void OnInternalIDChanged();
    partial void OnSFNNameChanging(string value);
    partial void OnSFNNameChanged();
    partial void OnFDCNameChanging(string value);
    partial void OnFDCNameChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public Bank()
		{
			this._BankUsers = new EntitySet<BankUser>(new Action<BankUser>(this.attach_BankUsers), new Action<BankUser>(this.detach_BankUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalID", DbType="VarChar(50)")]
		public string InternalID
		{
			get
			{
				return this._InternalID;
			}
			set
			{
				if ((this._InternalID != value))
				{
					this.OnInternalIDChanging(value);
					this.SendPropertyChanging();
					this._InternalID = value;
					this.SendPropertyChanged("InternalID");
					this.OnInternalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SFNName", DbType="VarChar(50)")]
		public string SFNName
		{
			get
			{
				return this._SFNName;
			}
			set
			{
				if ((this._SFNName != value))
				{
					this.OnSFNNameChanging(value);
					this.SendPropertyChanging();
					this._SFNName = value;
					this.SendPropertyChanged("SFNName");
					this.OnSFNNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FDCName", DbType="VarChar(50)")]
		public string FDCName
		{
			get
			{
				return this._FDCName;
			}
			set
			{
				if ((this._FDCName != value))
				{
					this.OnFDCNameChanging(value);
					this.SendPropertyChanging();
					this._FDCName = value;
					this.SendPropertyChanged("FDCName");
					this.OnFDCNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BankUser", Storage="_BankUsers", ThisKey="ID", OtherKey="BankID")]
		public EntitySet<BankUser> BankUsers
		{
			get
			{
				return this._BankUsers;
			}
			set
			{
				this._BankUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankUsers(BankUser entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_BankUsers(BankUser entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankUsers")]
	public partial class BankUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _InternalID;
		
		private System.Nullable<int> _BankID;
		
		private string _FullName;
		
		private System.Nullable<int> _ManualType;
		
		private System.Nullable<int> _ElectronicType;
		
		private System.Nullable<int> _ContactDetails;
		
		private EntityRef<Bank> _Bank;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInternalIDChanging(string value);
    partial void OnInternalIDChanged();
    partial void OnBankIDChanging(System.Nullable<int> value);
    partial void OnBankIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnManualTypeChanging(System.Nullable<int> value);
    partial void OnManualTypeChanged();
    partial void OnElectronicTypeChanging(System.Nullable<int> value);
    partial void OnElectronicTypeChanged();
    partial void OnContactDetailsChanging(System.Nullable<int> value);
    partial void OnContactDetailsChanged();
    #endregion
		
		public BankUser()
		{
			this._Bank = default(EntityRef<Bank>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalID", DbType="VarChar(50)")]
		public string InternalID
		{
			get
			{
				return this._InternalID;
			}
			set
			{
				if ((this._InternalID != value))
				{
					this.OnInternalIDChanging(value);
					this.SendPropertyChanging();
					this._InternalID = value;
					this.SendPropertyChanged("InternalID");
					this.OnInternalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankID", DbType="Int")]
		public System.Nullable<int> BankID
		{
			get
			{
				return this._BankID;
			}
			set
			{
				if ((this._BankID != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIDChanging(value);
					this.SendPropertyChanging();
					this._BankID = value;
					this.SendPropertyChanged("BankID");
					this.OnBankIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(500)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualType", DbType="Int")]
		public System.Nullable<int> ManualType
		{
			get
			{
				return this._ManualType;
			}
			set
			{
				if ((this._ManualType != value))
				{
					this.OnManualTypeChanging(value);
					this.SendPropertyChanging();
					this._ManualType = value;
					this.SendPropertyChanged("ManualType");
					this.OnManualTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectronicType", DbType="Int")]
		public System.Nullable<int> ElectronicType
		{
			get
			{
				return this._ElectronicType;
			}
			set
			{
				if ((this._ElectronicType != value))
				{
					this.OnElectronicTypeChanging(value);
					this.SendPropertyChanging();
					this._ElectronicType = value;
					this.SendPropertyChanged("ElectronicType");
					this.OnElectronicTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactDetails", DbType="Int")]
		public System.Nullable<int> ContactDetails
		{
			get
			{
				return this._ContactDetails;
			}
			set
			{
				if ((this._ContactDetails != value))
				{
					this.OnContactDetailsChanging(value);
					this.SendPropertyChanging();
					this._ContactDetails = value;
					this.SendPropertyChanged("ContactDetails");
					this.OnContactDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BankUser", Storage="_Bank", ThisKey="BankID", OtherKey="ID", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.BankUsers.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.BankUsers.Add(this);
						this._BankID = value.ID;
					}
					else
					{
						this._BankID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
