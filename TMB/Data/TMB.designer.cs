#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TMB.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TMB")]
	public partial class TMBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStatus(Status instance);
    partial void UpdateStatus(Status instance);
    partial void DeleteStatus(Status instance);
    partial void InsertSide(Side instance);
    partial void UpdateSide(Side instance);
    partial void DeleteSide(Side instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertIntegrationTemplate(IntegrationTemplate instance);
    partial void UpdateIntegrationTemplate(IntegrationTemplate instance);
    partial void DeleteIntegrationTemplate(IntegrationTemplate instance);
    partial void InsertRTNSNotificationType(RTNSNotificationType instance);
    partial void UpdateRTNSNotificationType(RTNSNotificationType instance);
    partial void DeleteRTNSNotificationType(RTNSNotificationType instance);
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertRoundingMode(RoundingMode instance);
    partial void UpdateRoundingMode(RoundingMode instance);
    partial void DeleteRoundingMode(RoundingMode instance);
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertBroker(Broker instance);
    partial void UpdateBroker(Broker instance);
    partial void DeleteBroker(Broker instance);
    partial void InsertContactDetail(ContactDetail instance);
    partial void UpdateContactDetail(ContactDetail instance);
    partial void DeleteContactDetail(ContactDetail instance);
    partial void InsertBankUser(BankUser instance);
    partial void UpdateBankUser(BankUser instance);
    partial void DeleteBankUser(BankUser instance);
    partial void InsertRequestLog(RequestLog instance);
    partial void UpdateRequestLog(RequestLog instance);
    partial void DeleteRequestLog(RequestLog instance);
    partial void InsertResponseLog(ResponseLog instance);
    partial void UpdateResponseLog(ResponseLog instance);
    partial void DeleteResponseLog(ResponseLog instance);
    partial void InsertSubscribtionLog(SubscribtionLog instance);
    partial void UpdateSubscribtionLog(SubscribtionLog instance);
    partial void DeleteSubscribtionLog(SubscribtionLog instance);
    partial void InsertAmountType(AmountType instance);
    partial void UpdateAmountType(AmountType instance);
    partial void DeleteAmountType(AmountType instance);
    partial void InsertTransactionLeg(TransactionLeg instance);
    partial void UpdateTransactionLeg(TransactionLeg instance);
    partial void DeleteTransactionLeg(TransactionLeg instance);
    partial void InsertTermDate(TermDate instance);
    partial void UpdateTermDate(TermDate instance);
    partial void DeleteTermDate(TermDate instance);
    partial void InsertTerm(Term instance);
    partial void UpdateTerm(Term instance);
    partial void DeleteTerm(Term instance);
    partial void InsertCurrencyScale(CurrencyScale instance);
    partial void UpdateCurrencyScale(CurrencyScale instance);
    partial void DeleteCurrencyScale(CurrencyScale instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertFixingCentre(FixingCentre instance);
    partial void UpdateFixingCentre(FixingCentre instance);
    partial void DeleteFixingCentre(FixingCentre instance);
    partial void InsertTransactionFix(TransactionFix instance);
    partial void UpdateTransactionFix(TransactionFix instance);
    partial void DeleteTransactionFix(TransactionFix instance);
    partial void InsertPaymentFrequencyLookup(PaymentFrequencyLookup instance);
    partial void UpdatePaymentFrequencyLookup(PaymentFrequencyLookup instance);
    partial void DeletePaymentFrequencyLookup(PaymentFrequencyLookup instance);
    partial void InsertTransactionMM(TransactionMM instance);
    partial void UpdateTransactionMM(TransactionMM instance);
    partial void DeleteTransactionMM(TransactionMM instance);
    #endregion
		
		public TMBDataContext() : 
				base(global::TMB.Properties.Settings.Default.TMBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TMBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TMBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TMBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TMBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Status> Status
		{
			get
			{
				return this.GetTable<Status>();
			}
		}
		
		public System.Data.Linq.Table<Side> Sides
		{
			get
			{
				return this.GetTable<Side>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<IntegrationTemplate> IntegrationTemplates
		{
			get
			{
				return this.GetTable<IntegrationTemplate>();
			}
		}
		
		public System.Data.Linq.Table<RTNSNotificationType> RTNSNotificationTypes
		{
			get
			{
				return this.GetTable<RTNSNotificationType>();
			}
		}
		
		public System.Data.Linq.Table<Bank> Banks
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<RoundingMode> RoundingModes
		{
			get
			{
				return this.GetTable<RoundingMode>();
			}
		}
		
		public System.Data.Linq.Table<Currency> Currencies
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ReportParameters> ReportParameters
		{
			get
			{
				return this.GetTable<ReportParameters>();
			}
		}
		
		public System.Data.Linq.Table<vwDealConfirmation> vwDealConfirmations
		{
			get
			{
				return this.GetTable<vwDealConfirmation>();
			}
		}
		
		public System.Data.Linq.Table<Broker> Brokers
		{
			get
			{
				return this.GetTable<Broker>();
			}
		}
		
		public System.Data.Linq.Table<ContactDetail> ContactDetails
		{
			get
			{
				return this.GetTable<ContactDetail>();
			}
		}
		
		public System.Data.Linq.Table<BankUser> BankUsers
		{
			get
			{
				return this.GetTable<BankUser>();
			}
		}
		
		public System.Data.Linq.Table<vwDealTicket> vwDealTickets
		{
			get
			{
				return this.GetTable<vwDealTicket>();
			}
		}
		
		public System.Data.Linq.Table<vwDealConfirmationPerBankUser> vwDealConfirmationPerBankUsers
		{
			get
			{
				return this.GetTable<vwDealConfirmationPerBankUser>();
			}
		}
		
		public System.Data.Linq.Table<RequestLog> RequestLogs
		{
			get
			{
				return this.GetTable<RequestLog>();
			}
		}
		
		public System.Data.Linq.Table<ResponseLog> ResponseLogs
		{
			get
			{
				return this.GetTable<ResponseLog>();
			}
		}
		
		public System.Data.Linq.Table<SubscribtionLog> SubscribtionLogs
		{
			get
			{
				return this.GetTable<SubscribtionLog>();
			}
		}
		
		public System.Data.Linq.Table<AmountType> AmountTypes
		{
			get
			{
				return this.GetTable<AmountType>();
			}
		}
		
		public System.Data.Linq.Table<TransactionLeg> TransactionLegs
		{
			get
			{
				return this.GetTable<TransactionLeg>();
			}
		}
		
		public System.Data.Linq.Table<TermDate> TermDates
		{
			get
			{
				return this.GetTable<TermDate>();
			}
		}
		
		public System.Data.Linq.Table<Term> Terms
		{
			get
			{
				return this.GetTable<Term>();
			}
		}
		
		public System.Data.Linq.Table<CurrencyScale> CurrencyScales
		{
			get
			{
				return this.GetTable<CurrencyScale>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<vwDealStatus> vwDealStatus
		{
			get
			{
				return this.GetTable<vwDealStatus>();
			}
		}
		
		public System.Data.Linq.Table<FixingCentre> FixingCentres
		{
			get
			{
				return this.GetTable<FixingCentre>();
			}
		}
		
		public System.Data.Linq.Table<TransactionFix> TransactionFixes
		{
			get
			{
				return this.GetTable<TransactionFix>();
			}
		}
		
		public System.Data.Linq.Table<PaymentFrequencyLookup> PaymentFrequencyLookups
		{
			get
			{
				return this.GetTable<PaymentFrequencyLookup>();
			}
		}
		
		public System.Data.Linq.Table<TransactionMM> TransactionMMs
		{
			get
			{
				return this.GetTable<TransactionMM>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Status")]
	public partial class Status : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Status()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Transaction", Storage="_Transactions", ThisKey="ID", OtherKey="Status")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Status1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Side")]
	public partial class Side : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Seq;
		
		private EntitySet<TransactionLeg> _TransactionLegs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSeqChanging(System.Nullable<int> value);
    partial void OnSeqChanged();
    #endregion
		
		public Side()
		{
			this._TransactionLegs = new EntitySet<TransactionLeg>(new Action<TransactionLeg>(this.attach_TransactionLegs), new Action<TransactionLeg>(this.detach_TransactionLegs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seq", DbType="Int")]
		public System.Nullable<int> Seq
		{
			get
			{
				return this._Seq;
			}
			set
			{
				if ((this._Seq != value))
				{
					this.OnSeqChanging(value);
					this.SendPropertyChanging();
					this._Seq = value;
					this.SendPropertyChanged("Seq");
					this.OnSeqChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Side_TransactionLeg", Storage="_TransactionLegs", ThisKey="ID", OtherKey="TransactionSide")]
		public EntitySet<TransactionLeg> TransactionLegs
		{
			get
			{
				return this._TransactionLegs;
			}
			set
			{
				this._TransactionLegs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Side = this;
		}
		
		private void detach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Side = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _IsMultiLeg;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsMultiLegChanging(System.Nullable<int> value);
    partial void OnIsMultiLegChanged();
    #endregion
		
		public Product()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMultiLeg", DbType="Int")]
		public System.Nullable<int> IsMultiLeg
		{
			get
			{
				return this._IsMultiLeg;
			}
			set
			{
				if ((this._IsMultiLeg != value))
				{
					this.OnIsMultiLegChanging(value);
					this.SendPropertyChanging();
					this._IsMultiLeg = value;
					this.SendPropertyChanged("IsMultiLeg");
					this.OnIsMultiLegChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Transaction", Storage="_Transactions", ThisKey="ID", OtherKey="ProductType")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reports")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Seq;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSeqChanging(System.Nullable<int> value);
    partial void OnSeqChanged();
    #endregion
		
		public Report()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seq", DbType="Int")]
		public System.Nullable<int> Seq
		{
			get
			{
				return this._Seq;
			}
			set
			{
				if ((this._Seq != value))
				{
					this.OnSeqChanging(value);
					this.SendPropertyChanging();
					this._Seq = value;
					this.SendPropertyChanged("Seq");
					this.OnSeqChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IntegrationTemplates")]
	public partial class IntegrationTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Command;
		
		private System.Nullable<int> _Version;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCommandChanging(string value);
    partial void OnCommandChanged();
    partial void OnVersionChanging(System.Nullable<int> value);
    partial void OnVersionChanged();
    #endregion
		
		public IntegrationTemplate()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Command", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Command
		{
			get
			{
				return this._Command;
			}
			set
			{
				if ((this._Command != value))
				{
					this.OnCommandChanging(value);
					this.SendPropertyChanging();
					this._Command = value;
					this.SendPropertyChanged("Command");
					this.OnCommandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", DbType="Int")]
		public System.Nullable<int> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RTNSNotificationType")]
	public partial class RTNSNotificationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<BankUser> _BankUsers;
		
		private EntitySet<BankUser> _BankUsers1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public RTNSNotificationType()
		{
			this._BankUsers = new EntitySet<BankUser>(new Action<BankUser>(this.attach_BankUsers), new Action<BankUser>(this.detach_BankUsers));
			this._BankUsers1 = new EntitySet<BankUser>(new Action<BankUser>(this.attach_BankUsers1), new Action<BankUser>(this.detach_BankUsers1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RTNSNotificationType_BankUser", Storage="_BankUsers", ThisKey="ID", OtherKey="ElectronicType")]
		public EntitySet<BankUser> BankUsers
		{
			get
			{
				return this._BankUsers;
			}
			set
			{
				this._BankUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RTNSNotificationType_BankUser1", Storage="_BankUsers1", ThisKey="ID", OtherKey="ManualType")]
		public EntitySet<BankUser> BankUsers1
		{
			get
			{
				return this._BankUsers1;
			}
			set
			{
				this._BankUsers1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankUsers(BankUser entity)
		{
			this.SendPropertyChanging();
			entity.RTNSNotificationType = this;
		}
		
		private void detach_BankUsers(BankUser entity)
		{
			this.SendPropertyChanging();
			entity.RTNSNotificationType = null;
		}
		
		private void attach_BankUsers1(BankUser entity)
		{
			this.SendPropertyChanging();
			entity.RTNSNotificationType1 = this;
		}
		
		private void detach_BankUsers1(BankUser entity)
		{
			this.SendPropertyChanging();
			entity.RTNSNotificationType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bank")]
	public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Code;
		
		private string _InternalID;
		
		private string _SFNName;
		
		private string _FDCName;
		
		private System.Nullable<int> _Status;
		
		private EntitySet<BankUser> _BankUsers;
		
		private EntitySet<TransactionLeg> _TransactionLegs;
		
		private EntitySet<TransactionLeg> _TransactionLegs1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnInternalIDChanging(string value);
    partial void OnInternalIDChanged();
    partial void OnSFNNameChanging(string value);
    partial void OnSFNNameChanged();
    partial void OnFDCNameChanging(string value);
    partial void OnFDCNameChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public Bank()
		{
			this._BankUsers = new EntitySet<BankUser>(new Action<BankUser>(this.attach_BankUsers), new Action<BankUser>(this.detach_BankUsers));
			this._TransactionLegs = new EntitySet<TransactionLeg>(new Action<TransactionLeg>(this.attach_TransactionLegs), new Action<TransactionLeg>(this.detach_TransactionLegs));
			this._TransactionLegs1 = new EntitySet<TransactionLeg>(new Action<TransactionLeg>(this.attach_TransactionLegs1), new Action<TransactionLeg>(this.detach_TransactionLegs1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(200)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalID", DbType="VarChar(50)")]
		public string InternalID
		{
			get
			{
				return this._InternalID;
			}
			set
			{
				if ((this._InternalID != value))
				{
					this.OnInternalIDChanging(value);
					this.SendPropertyChanging();
					this._InternalID = value;
					this.SendPropertyChanged("InternalID");
					this.OnInternalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SFNName", DbType="VarChar(50)")]
		public string SFNName
		{
			get
			{
				return this._SFNName;
			}
			set
			{
				if ((this._SFNName != value))
				{
					this.OnSFNNameChanging(value);
					this.SendPropertyChanging();
					this._SFNName = value;
					this.SendPropertyChanged("SFNName");
					this.OnSFNNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FDCName", DbType="VarChar(50)")]
		public string FDCName
		{
			get
			{
				return this._FDCName;
			}
			set
			{
				if ((this._FDCName != value))
				{
					this.OnFDCNameChanging(value);
					this.SendPropertyChanging();
					this._FDCName = value;
					this.SendPropertyChanged("FDCName");
					this.OnFDCNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BankUser", Storage="_BankUsers", ThisKey="ID", OtherKey="BankID")]
		public EntitySet<BankUser> BankUsers
		{
			get
			{
				return this._BankUsers;
			}
			set
			{
				this._BankUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_TransactionLeg", Storage="_TransactionLegs", ThisKey="ID", OtherKey="BuyerID")]
		public EntitySet<TransactionLeg> TransactionLegs
		{
			get
			{
				return this._TransactionLegs;
			}
			set
			{
				this._TransactionLegs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_TransactionLeg1", Storage="_TransactionLegs1", ThisKey="ID", OtherKey="SellerID")]
		public EntitySet<TransactionLeg> TransactionLegs1
		{
			get
			{
				return this._TransactionLegs1;
			}
			set
			{
				this._TransactionLegs1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BankUsers(BankUser entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_BankUsers(BankUser entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
		
		private void attach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
		
		private void attach_TransactionLegs1(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Bank1 = this;
		}
		
		private void detach_TransactionLegs1(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Bank1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RoundingMode")]
	public partial class RoundingMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Currency> _Currencies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public RoundingMode()
		{
			this._Currencies = new EntitySet<Currency>(new Action<Currency>(this.attach_Currencies), new Action<Currency>(this.detach_Currencies));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundingMode_Currency", Storage="_Currencies", ThisKey="ID", OtherKey="RoundingMode")]
		public EntitySet<Currency> Currencies
		{
			get
			{
				return this._Currencies;
			}
			set
			{
				this._Currencies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Currencies(Currency entity)
		{
			this.SendPropertyChanging();
			entity.RoundingMode1 = this;
		}
		
		private void detach_Currencies(Currency entity)
		{
			this.SendPropertyChanging();
			entity.RoundingMode1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Currency")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Code;
		
		private string _Symbol;
		
		private System.Nullable<int> _DecimalPlaces;
		
		private System.Nullable<int> _RoundingMode;
		
		private System.Nullable<int> _Status;
		
		private EntitySet<TransactionLeg> _TransactionLegs;
		
		private EntitySet<TransactionLeg> _TransactionLegs1;
		
		private EntitySet<TransactionFix> _TransactionFixes;
		
		private EntityRef<RoundingMode> _RoundingMode1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnSymbolChanging(string value);
    partial void OnSymbolChanged();
    partial void OnDecimalPlacesChanging(System.Nullable<int> value);
    partial void OnDecimalPlacesChanged();
    partial void OnRoundingModeChanging(System.Nullable<int> value);
    partial void OnRoundingModeChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public Currency()
		{
			this._TransactionLegs = new EntitySet<TransactionLeg>(new Action<TransactionLeg>(this.attach_TransactionLegs), new Action<TransactionLeg>(this.detach_TransactionLegs));
			this._TransactionLegs1 = new EntitySet<TransactionLeg>(new Action<TransactionLeg>(this.attach_TransactionLegs1), new Action<TransactionLeg>(this.detach_TransactionLegs1));
			this._TransactionFixes = new EntitySet<TransactionFix>(new Action<TransactionFix>(this.attach_TransactionFixes), new Action<TransactionFix>(this.detach_TransactionFixes));
			this._RoundingMode1 = default(EntityRef<RoundingMode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(5)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Symbol", DbType="VarChar(2)")]
		public string Symbol
		{
			get
			{
				return this._Symbol;
			}
			set
			{
				if ((this._Symbol != value))
				{
					this.OnSymbolChanging(value);
					this.SendPropertyChanging();
					this._Symbol = value;
					this.SendPropertyChanged("Symbol");
					this.OnSymbolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DecimalPlaces", DbType="Int")]
		public System.Nullable<int> DecimalPlaces
		{
			get
			{
				return this._DecimalPlaces;
			}
			set
			{
				if ((this._DecimalPlaces != value))
				{
					this.OnDecimalPlacesChanging(value);
					this.SendPropertyChanging();
					this._DecimalPlaces = value;
					this.SendPropertyChanged("DecimalPlaces");
					this.OnDecimalPlacesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoundingMode", DbType="Int")]
		public System.Nullable<int> RoundingMode
		{
			get
			{
				return this._RoundingMode;
			}
			set
			{
				if ((this._RoundingMode != value))
				{
					if (this._RoundingMode1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoundingModeChanging(value);
					this.SendPropertyChanging();
					this._RoundingMode = value;
					this.SendPropertyChanged("RoundingMode");
					this.OnRoundingModeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_TransactionLeg", Storage="_TransactionLegs", ThisKey="ID", OtherKey="BuyerCurrency")]
		public EntitySet<TransactionLeg> TransactionLegs
		{
			get
			{
				return this._TransactionLegs;
			}
			set
			{
				this._TransactionLegs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_TransactionLeg1", Storage="_TransactionLegs1", ThisKey="ID", OtherKey="SellerCurrency")]
		public EntitySet<TransactionLeg> TransactionLegs1
		{
			get
			{
				return this._TransactionLegs1;
			}
			set
			{
				this._TransactionLegs1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_TransactionFix", Storage="_TransactionFixes", ThisKey="ID", OtherKey="SettlementCurrency")]
		public EntitySet<TransactionFix> TransactionFixes
		{
			get
			{
				return this._TransactionFixes;
			}
			set
			{
				this._TransactionFixes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoundingMode_Currency", Storage="_RoundingMode1", ThisKey="RoundingMode", OtherKey="ID", IsForeignKey=true)]
		public RoundingMode RoundingMode1
		{
			get
			{
				return this._RoundingMode1.Entity;
			}
			set
			{
				RoundingMode previousValue = this._RoundingMode1.Entity;
				if (((previousValue != value) 
							|| (this._RoundingMode1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoundingMode1.Entity = null;
						previousValue.Currencies.Remove(this);
					}
					this._RoundingMode1.Entity = value;
					if ((value != null))
					{
						value.Currencies.Add(this);
						this._RoundingMode = value.ID;
					}
					else
					{
						this._RoundingMode = default(Nullable<int>);
					}
					this.SendPropertyChanged("RoundingMode1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_TransactionLegs1(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Currency1 = this;
		}
		
		private void detach_TransactionLegs1(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Currency1 = null;
		}
		
		private void attach_TransactionFixes(TransactionFix entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_TransactionFixes(TransactionFix entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Password;
		
		private string _InternalID;
		
		private string _Fullname;
		
		private System.Nullable<int> _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnInternalIDChanging(string value);
    partial void OnInternalIDChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalID", DbType="NChar(10)")]
		public string InternalID
		{
			get
			{
				return this._InternalID;
			}
			set
			{
				if ((this._InternalID != value))
				{
					this.OnInternalIDChanging(value);
					this.SendPropertyChanging();
					this._InternalID = value;
					this.SendPropertyChanged("InternalID");
					this.OnInternalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fullname", DbType="VarChar(500)")]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class ReportParameters
	{
		
		private string _FromCompany;
		
		private string _FromPerson;
		
		private string _ToCompany;
		
		private string _ToPerson;
		
		private string _Tel;
		
		private string _Fax;
		
		private string _Product;
		
		private string _Date;
		
		private string _AddressLine1;
		
		private string _AddressLine2;
		
		private string _AddressLine3;
		
		private string _AddressLine4;
		
		public ReportParameters()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromCompany", CanBeNull=false)]
		public string FromCompany
		{
			get
			{
				return this._FromCompany;
			}
			set
			{
				if ((this._FromCompany != value))
				{
					this._FromCompany = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromPerson", CanBeNull=false)]
		public string FromPerson
		{
			get
			{
				return this._FromPerson;
			}
			set
			{
				if ((this._FromPerson != value))
				{
					this._FromPerson = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToCompany", CanBeNull=false)]
		public string ToCompany
		{
			get
			{
				return this._ToCompany;
			}
			set
			{
				if ((this._ToCompany != value))
				{
					this._ToCompany = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToPerson", CanBeNull=false)]
		public string ToPerson
		{
			get
			{
				return this._ToPerson;
			}
			set
			{
				if ((this._ToPerson != value))
				{
					this._ToPerson = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", CanBeNull=false)]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this._Tel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", CanBeNull=false)]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this._Fax = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Product", CanBeNull=false)]
		public string Product
		{
			get
			{
				return this._Product;
			}
			set
			{
				if ((this._Product != value))
				{
					this._Product = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", CanBeNull=false)]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine1", CanBeNull=false)]
		public string AddressLine1
		{
			get
			{
				return this._AddressLine1;
			}
			set
			{
				if ((this._AddressLine1 != value))
				{
					this._AddressLine1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine2", CanBeNull=false)]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this._AddressLine2 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine3", CanBeNull=false)]
		public string AddressLine3
		{
			get
			{
				return this._AddressLine3;
			}
			set
			{
				if ((this._AddressLine3 != value))
				{
					this._AddressLine3 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressLine4", CanBeNull=false)]
		public string AddressLine4
		{
			get
			{
				return this._AddressLine4;
			}
			set
			{
				if ((this._AddressLine4 != value))
				{
					this._AddressLine4 = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwDealConfirmation")]
	public partial class vwDealConfirmation
	{
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _TransactionDate;
		
		private System.Nullable<double> _BuyerBrokerage;
		
		private System.Nullable<double> _SellerBrokerage;
		
		private string _BuyerName;
		
		private string _SellerName;
		
		private System.Nullable<int> _BuyerID;
		
		private System.Nullable<int> _SellerID;
		
		private string _BuyerCurrency;
		
		private string _SellerCurrency;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<double> _Rate;
		
		private System.Nullable<System.DateTime> _ActionDate;
		
		private string _Term;
		
		public vwDealConfirmation()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this._TransactionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerBrokerage", DbType="Float")]
		public System.Nullable<double> BuyerBrokerage
		{
			get
			{
				return this._BuyerBrokerage;
			}
			set
			{
				if ((this._BuyerBrokerage != value))
				{
					this._BuyerBrokerage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerBrokerage", DbType="Float")]
		public System.Nullable<double> SellerBrokerage
		{
			get
			{
				return this._SellerBrokerage;
			}
			set
			{
				if ((this._SellerBrokerage != value))
				{
					this._SellerBrokerage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerName", DbType="VarChar(200)")]
		public string BuyerName
		{
			get
			{
				return this._BuyerName;
			}
			set
			{
				if ((this._BuyerName != value))
				{
					this._BuyerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerName", DbType="VarChar(200)")]
		public string SellerName
		{
			get
			{
				return this._SellerName;
			}
			set
			{
				if ((this._SellerName != value))
				{
					this._SellerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerID", DbType="Int")]
		public System.Nullable<int> BuyerID
		{
			get
			{
				return this._BuyerID;
			}
			set
			{
				if ((this._BuyerID != value))
				{
					this._BuyerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerID", DbType="Int")]
		public System.Nullable<int> SellerID
		{
			get
			{
				return this._SellerID;
			}
			set
			{
				if ((this._SellerID != value))
				{
					this._SellerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerCurrency", DbType="VarChar(50)")]
		public string BuyerCurrency
		{
			get
			{
				return this._BuyerCurrency;
			}
			set
			{
				if ((this._BuyerCurrency != value))
				{
					this._BuyerCurrency = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerCurrency", DbType="VarChar(50)")]
		public string SellerCurrency
		{
			get
			{
				return this._SellerCurrency;
			}
			set
			{
				if ((this._SellerCurrency != value))
				{
					this._SellerCurrency = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Float")]
		public System.Nullable<double> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this._Rate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionDate
		{
			get
			{
				return this._ActionDate;
			}
			set
			{
				if ((this._ActionDate != value))
				{
					this._ActionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Term", DbType="VarChar(50)")]
		public string Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this._Term = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Broker")]
	public partial class Broker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _BrokerCode;
		
		private System.Nullable<int> _ContactDetails;
		
		private EntityRef<ContactDetail> _ContactDetail;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBrokerCodeChanging(string value);
    partial void OnBrokerCodeChanged();
    partial void OnContactDetailsChanging(System.Nullable<int> value);
    partial void OnContactDetailsChanged();
    #endregion
		
		public Broker()
		{
			this._ContactDetail = default(EntityRef<ContactDetail>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrokerCode", DbType="VarChar(50)")]
		public string BrokerCode
		{
			get
			{
				return this._BrokerCode;
			}
			set
			{
				if ((this._BrokerCode != value))
				{
					this.OnBrokerCodeChanging(value);
					this.SendPropertyChanging();
					this._BrokerCode = value;
					this.SendPropertyChanged("BrokerCode");
					this.OnBrokerCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactDetails", DbType="Int")]
		public System.Nullable<int> ContactDetails
		{
			get
			{
				return this._ContactDetails;
			}
			set
			{
				if ((this._ContactDetails != value))
				{
					if (this._ContactDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactDetailsChanging(value);
					this.SendPropertyChanging();
					this._ContactDetails = value;
					this.SendPropertyChanged("ContactDetails");
					this.OnContactDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetail_Broker", Storage="_ContactDetail", ThisKey="ContactDetails", OtherKey="ID", IsForeignKey=true)]
		public ContactDetail ContactDetail
		{
			get
			{
				return this._ContactDetail.Entity;
			}
			set
			{
				ContactDetail previousValue = this._ContactDetail.Entity;
				if (((previousValue != value) 
							|| (this._ContactDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactDetail.Entity = null;
						previousValue.Brokers.Remove(this);
					}
					this._ContactDetail.Entity = value;
					if ((value != null))
					{
						value.Brokers.Add(this);
						this._ContactDetails = value.ID;
					}
					else
					{
						this._ContactDetails = default(Nullable<int>);
					}
					this.SendPropertyChanged("ContactDetail");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactDetails")]
	public partial class ContactDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Tel;
		
		private string _Fax;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Address3;
		
		private string _Address4;
		
		private EntitySet<Broker> _Brokers;
		
		private EntitySet<BankUser> _BankUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTelChanging(string value);
    partial void OnTelChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnAddress3Changing(string value);
    partial void OnAddress3Changed();
    partial void OnAddress4Changing(string value);
    partial void OnAddress4Changed();
    #endregion
		
		public ContactDetail()
		{
			this._Brokers = new EntitySet<Broker>(new Action<Broker>(this.attach_Brokers), new Action<Broker>(this.detach_Brokers));
			this._BankUsers = new EntitySet<BankUser>(new Action<BankUser>(this.attach_BankUsers), new Action<BankUser>(this.detach_BankUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tel", DbType="VarChar(50)")]
		public string Tel
		{
			get
			{
				return this._Tel;
			}
			set
			{
				if ((this._Tel != value))
				{
					this.OnTelChanging(value);
					this.SendPropertyChanging();
					this._Tel = value;
					this.SendPropertyChanged("Tel");
					this.OnTelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(200)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(200)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address3", DbType="VarChar(200)")]
		public string Address3
		{
			get
			{
				return this._Address3;
			}
			set
			{
				if ((this._Address3 != value))
				{
					this.OnAddress3Changing(value);
					this.SendPropertyChanging();
					this._Address3 = value;
					this.SendPropertyChanged("Address3");
					this.OnAddress3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address4", DbType="VarChar(200)")]
		public string Address4
		{
			get
			{
				return this._Address4;
			}
			set
			{
				if ((this._Address4 != value))
				{
					this.OnAddress4Changing(value);
					this.SendPropertyChanging();
					this._Address4 = value;
					this.SendPropertyChanged("Address4");
					this.OnAddress4Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetail_Broker", Storage="_Brokers", ThisKey="ID", OtherKey="ContactDetails")]
		public EntitySet<Broker> Brokers
		{
			get
			{
				return this._Brokers;
			}
			set
			{
				this._Brokers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetail_BankUser", Storage="_BankUsers", ThisKey="ID", OtherKey="ContactDetails")]
		public EntitySet<BankUser> BankUsers
		{
			get
			{
				return this._BankUsers;
			}
			set
			{
				this._BankUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Brokers(Broker entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetail = this;
		}
		
		private void detach_Brokers(Broker entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetail = null;
		}
		
		private void attach_BankUsers(BankUser entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetail = this;
		}
		
		private void detach_BankUsers(BankUser entity)
		{
			this.SendPropertyChanging();
			entity.ContactDetail = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BankUsers")]
	public partial class BankUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _InternalID;
		
		private System.Nullable<int> _BankID;
		
		private string _FullName;
		
		private System.Nullable<int> _ManualType;
		
		private System.Nullable<int> _ElectronicType;
		
		private System.Nullable<int> _ContactDetails;
		
		private EntitySet<TransactionLeg> _TransactionLegs;
		
		private EntitySet<TransactionLeg> _TransactionLegs1;
		
		private EntityRef<Bank> _Bank;
		
		private EntityRef<ContactDetail> _ContactDetail;
		
		private EntityRef<RTNSNotificationType> _RTNSNotificationType;
		
		private EntityRef<RTNSNotificationType> _RTNSNotificationType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnInternalIDChanging(string value);
    partial void OnInternalIDChanged();
    partial void OnBankIDChanging(System.Nullable<int> value);
    partial void OnBankIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnManualTypeChanging(System.Nullable<int> value);
    partial void OnManualTypeChanged();
    partial void OnElectronicTypeChanging(System.Nullable<int> value);
    partial void OnElectronicTypeChanged();
    partial void OnContactDetailsChanging(System.Nullable<int> value);
    partial void OnContactDetailsChanged();
    #endregion
		
		public BankUser()
		{
			this._TransactionLegs = new EntitySet<TransactionLeg>(new Action<TransactionLeg>(this.attach_TransactionLegs), new Action<TransactionLeg>(this.detach_TransactionLegs));
			this._TransactionLegs1 = new EntitySet<TransactionLeg>(new Action<TransactionLeg>(this.attach_TransactionLegs1), new Action<TransactionLeg>(this.detach_TransactionLegs1));
			this._Bank = default(EntityRef<Bank>);
			this._ContactDetail = default(EntityRef<ContactDetail>);
			this._RTNSNotificationType = default(EntityRef<RTNSNotificationType>);
			this._RTNSNotificationType1 = default(EntityRef<RTNSNotificationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InternalID", DbType="VarChar(50)")]
		public string InternalID
		{
			get
			{
				return this._InternalID;
			}
			set
			{
				if ((this._InternalID != value))
				{
					this.OnInternalIDChanging(value);
					this.SendPropertyChanging();
					this._InternalID = value;
					this.SendPropertyChanged("InternalID");
					this.OnInternalIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankID", DbType="Int")]
		public System.Nullable<int> BankID
		{
			get
			{
				return this._BankID;
			}
			set
			{
				if ((this._BankID != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIDChanging(value);
					this.SendPropertyChanging();
					this._BankID = value;
					this.SendPropertyChanged("BankID");
					this.OnBankIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(500)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ManualType", DbType="Int")]
		public System.Nullable<int> ManualType
		{
			get
			{
				return this._ManualType;
			}
			set
			{
				if ((this._ManualType != value))
				{
					if (this._RTNSNotificationType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManualTypeChanging(value);
					this.SendPropertyChanging();
					this._ManualType = value;
					this.SendPropertyChanged("ManualType");
					this.OnManualTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ElectronicType", DbType="Int")]
		public System.Nullable<int> ElectronicType
		{
			get
			{
				return this._ElectronicType;
			}
			set
			{
				if ((this._ElectronicType != value))
				{
					if (this._RTNSNotificationType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnElectronicTypeChanging(value);
					this.SendPropertyChanging();
					this._ElectronicType = value;
					this.SendPropertyChanged("ElectronicType");
					this.OnElectronicTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactDetails", DbType="Int")]
		public System.Nullable<int> ContactDetails
		{
			get
			{
				return this._ContactDetails;
			}
			set
			{
				if ((this._ContactDetails != value))
				{
					if (this._ContactDetail.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactDetailsChanging(value);
					this.SendPropertyChanging();
					this._ContactDetails = value;
					this.SendPropertyChanged("ContactDetails");
					this.OnContactDetailsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankUser_TransactionLeg", Storage="_TransactionLegs", ThisKey="ID", OtherKey="BuyerPersonID")]
		public EntitySet<TransactionLeg> TransactionLegs
		{
			get
			{
				return this._TransactionLegs;
			}
			set
			{
				this._TransactionLegs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankUser_TransactionLeg1", Storage="_TransactionLegs1", ThisKey="ID", OtherKey="SellerPersonID")]
		public EntitySet<TransactionLeg> TransactionLegs1
		{
			get
			{
				return this._TransactionLegs1;
			}
			set
			{
				this._TransactionLegs1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_BankUser", Storage="_Bank", ThisKey="BankID", OtherKey="ID", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.BankUsers.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.BankUsers.Add(this);
						this._BankID = value.ID;
					}
					else
					{
						this._BankID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ContactDetail_BankUser", Storage="_ContactDetail", ThisKey="ContactDetails", OtherKey="ID", IsForeignKey=true)]
		public ContactDetail ContactDetail
		{
			get
			{
				return this._ContactDetail.Entity;
			}
			set
			{
				ContactDetail previousValue = this._ContactDetail.Entity;
				if (((previousValue != value) 
							|| (this._ContactDetail.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactDetail.Entity = null;
						previousValue.BankUsers.Remove(this);
					}
					this._ContactDetail.Entity = value;
					if ((value != null))
					{
						value.BankUsers.Add(this);
						this._ContactDetails = value.ID;
					}
					else
					{
						this._ContactDetails = default(Nullable<int>);
					}
					this.SendPropertyChanged("ContactDetail");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RTNSNotificationType_BankUser", Storage="_RTNSNotificationType", ThisKey="ElectronicType", OtherKey="ID", IsForeignKey=true)]
		public RTNSNotificationType RTNSNotificationType
		{
			get
			{
				return this._RTNSNotificationType.Entity;
			}
			set
			{
				RTNSNotificationType previousValue = this._RTNSNotificationType.Entity;
				if (((previousValue != value) 
							|| (this._RTNSNotificationType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RTNSNotificationType.Entity = null;
						previousValue.BankUsers.Remove(this);
					}
					this._RTNSNotificationType.Entity = value;
					if ((value != null))
					{
						value.BankUsers.Add(this);
						this._ElectronicType = value.ID;
					}
					else
					{
						this._ElectronicType = default(Nullable<int>);
					}
					this.SendPropertyChanged("RTNSNotificationType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RTNSNotificationType_BankUser1", Storage="_RTNSNotificationType1", ThisKey="ManualType", OtherKey="ID", IsForeignKey=true)]
		public RTNSNotificationType RTNSNotificationType1
		{
			get
			{
				return this._RTNSNotificationType1.Entity;
			}
			set
			{
				RTNSNotificationType previousValue = this._RTNSNotificationType1.Entity;
				if (((previousValue != value) 
							|| (this._RTNSNotificationType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RTNSNotificationType1.Entity = null;
						previousValue.BankUsers1.Remove(this);
					}
					this._RTNSNotificationType1.Entity = value;
					if ((value != null))
					{
						value.BankUsers1.Add(this);
						this._ManualType = value.ID;
					}
					else
					{
						this._ManualType = default(Nullable<int>);
					}
					this.SendPropertyChanged("RTNSNotificationType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.BankUser = this;
		}
		
		private void detach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.BankUser = null;
		}
		
		private void attach_TransactionLegs1(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.BankUser1 = this;
		}
		
		private void detach_TransactionLegs1(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.BankUser1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwDealTickets")]
	public partial class vwDealTicket
	{
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _TransactionDate;
		
		private System.Nullable<double> _BuyerBrokerage;
		
		private System.Nullable<double> _SellerBrokerage;
		
		private string _BuyerName;
		
		private string _SellerName;
		
		private System.Nullable<int> _BuyerID;
		
		private System.Nullable<int> _SellerID;
		
		private string _BuyerCurrency;
		
		private string _SellerCurrency;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<double> _Rate;
		
		private System.Nullable<System.DateTime> _ActionDate;
		
		private string _Term;
		
		public vwDealTicket()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this._TransactionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerBrokerage", DbType="Float")]
		public System.Nullable<double> BuyerBrokerage
		{
			get
			{
				return this._BuyerBrokerage;
			}
			set
			{
				if ((this._BuyerBrokerage != value))
				{
					this._BuyerBrokerage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerBrokerage", DbType="Float")]
		public System.Nullable<double> SellerBrokerage
		{
			get
			{
				return this._SellerBrokerage;
			}
			set
			{
				if ((this._SellerBrokerage != value))
				{
					this._SellerBrokerage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerName", DbType="VarChar(200)")]
		public string BuyerName
		{
			get
			{
				return this._BuyerName;
			}
			set
			{
				if ((this._BuyerName != value))
				{
					this._BuyerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerName", DbType="VarChar(200)")]
		public string SellerName
		{
			get
			{
				return this._SellerName;
			}
			set
			{
				if ((this._SellerName != value))
				{
					this._SellerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerID", DbType="Int")]
		public System.Nullable<int> BuyerID
		{
			get
			{
				return this._BuyerID;
			}
			set
			{
				if ((this._BuyerID != value))
				{
					this._BuyerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerID", DbType="Int")]
		public System.Nullable<int> SellerID
		{
			get
			{
				return this._SellerID;
			}
			set
			{
				if ((this._SellerID != value))
				{
					this._SellerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerCurrency", DbType="VarChar(50)")]
		public string BuyerCurrency
		{
			get
			{
				return this._BuyerCurrency;
			}
			set
			{
				if ((this._BuyerCurrency != value))
				{
					this._BuyerCurrency = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerCurrency", DbType="VarChar(50)")]
		public string SellerCurrency
		{
			get
			{
				return this._SellerCurrency;
			}
			set
			{
				if ((this._SellerCurrency != value))
				{
					this._SellerCurrency = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Float")]
		public System.Nullable<double> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this._Rate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionDate
		{
			get
			{
				return this._ActionDate;
			}
			set
			{
				if ((this._ActionDate != value))
				{
					this._ActionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Term", DbType="VarChar(50)")]
		public string Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this._Term = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwDealConfirmationPerBankUser")]
	public partial class vwDealConfirmationPerBankUser
	{
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _TransactionDate;
		
		private string _ProductName;
		
		private System.Nullable<double> _BuyerBrokerage;
		
		private System.Nullable<double> _SellerBrokerage;
		
		private int _DealID;
		
		private string _DealName;
		
		private string _DealPersonName;
		
		private string _DealTel;
		
		private string _DealFax;
		
		private string _BuyerName;
		
		private string _SellerName;
		
		private string _SellerPersonName;
		
		private System.Nullable<int> _BuyerID;
		
		private System.Nullable<int> _SellerID;
		
		private string _BuyerCurrency;
		
		private string _SellerCurrency;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<double> _Rate;
		
		private System.Nullable<System.DateTime> _ActionDate;
		
		private string _Term;
		
		public vwDealConfirmationPerBankUser()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this._TransactionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductName", DbType="VarChar(50)")]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this._ProductName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerBrokerage", DbType="Float")]
		public System.Nullable<double> BuyerBrokerage
		{
			get
			{
				return this._BuyerBrokerage;
			}
			set
			{
				if ((this._BuyerBrokerage != value))
				{
					this._BuyerBrokerage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerBrokerage", DbType="Float")]
		public System.Nullable<double> SellerBrokerage
		{
			get
			{
				return this._SellerBrokerage;
			}
			set
			{
				if ((this._SellerBrokerage != value))
				{
					this._SellerBrokerage = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DealID", DbType="Int NOT NULL")]
		public int DealID
		{
			get
			{
				return this._DealID;
			}
			set
			{
				if ((this._DealID != value))
				{
					this._DealID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DealName", DbType="VarChar(200)")]
		public string DealName
		{
			get
			{
				return this._DealName;
			}
			set
			{
				if ((this._DealName != value))
				{
					this._DealName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DealPersonName", DbType="VarChar(50)")]
		public string DealPersonName
		{
			get
			{
				return this._DealPersonName;
			}
			set
			{
				if ((this._DealPersonName != value))
				{
					this._DealPersonName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DealTel", DbType="VarChar(50)")]
		public string DealTel
		{
			get
			{
				return this._DealTel;
			}
			set
			{
				if ((this._DealTel != value))
				{
					this._DealTel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DealFax", DbType="VarChar(50)")]
		public string DealFax
		{
			get
			{
				return this._DealFax;
			}
			set
			{
				if ((this._DealFax != value))
				{
					this._DealFax = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerName", DbType="VarChar(200)")]
		public string BuyerName
		{
			get
			{
				return this._BuyerName;
			}
			set
			{
				if ((this._BuyerName != value))
				{
					this._BuyerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerName", DbType="VarChar(200)")]
		public string SellerName
		{
			get
			{
				return this._SellerName;
			}
			set
			{
				if ((this._SellerName != value))
				{
					this._SellerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerPersonName", DbType="VarChar(50)")]
		public string SellerPersonName
		{
			get
			{
				return this._SellerPersonName;
			}
			set
			{
				if ((this._SellerPersonName != value))
				{
					this._SellerPersonName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerID", DbType="Int")]
		public System.Nullable<int> BuyerID
		{
			get
			{
				return this._BuyerID;
			}
			set
			{
				if ((this._BuyerID != value))
				{
					this._BuyerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerID", DbType="Int")]
		public System.Nullable<int> SellerID
		{
			get
			{
				return this._SellerID;
			}
			set
			{
				if ((this._SellerID != value))
				{
					this._SellerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerCurrency", DbType="VarChar(5)")]
		public string BuyerCurrency
		{
			get
			{
				return this._BuyerCurrency;
			}
			set
			{
				if ((this._BuyerCurrency != value))
				{
					this._BuyerCurrency = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerCurrency", DbType="VarChar(5)")]
		public string SellerCurrency
		{
			get
			{
				return this._SellerCurrency;
			}
			set
			{
				if ((this._SellerCurrency != value))
				{
					this._SellerCurrency = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this._Amount = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Float")]
		public System.Nullable<double> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this._Rate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionDate
		{
			get
			{
				return this._ActionDate;
			}
			set
			{
				if ((this._ActionDate != value))
				{
					this._ActionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Term", DbType="VarChar(50)")]
		public string Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this._Term = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestLog")]
	public partial class RequestLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TransactionID;
		
		private string _RequestMessage;
		
		private System.Nullable<System.DateTime> _RequestDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTransactionIDChanging(System.Nullable<int> value);
    partial void OnTransactionIDChanged();
    partial void OnRequestMessageChanging(string value);
    partial void OnRequestMessageChanged();
    partial void OnRequestDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestDateChanged();
    #endregion
		
		public RequestLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="Int")]
		public System.Nullable<int> TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestMessage", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string RequestMessage
		{
			get
			{
				return this._RequestMessage;
			}
			set
			{
				if ((this._RequestMessage != value))
				{
					this.OnRequestMessageChanging(value);
					this.SendPropertyChanging();
					this._RequestMessage = value;
					this.SendPropertyChanged("RequestMessage");
					this.OnRequestMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> RequestDate
		{
			get
			{
				return this._RequestDate;
			}
			set
			{
				if ((this._RequestDate != value))
				{
					this.OnRequestDateChanging(value);
					this.SendPropertyChanging();
					this._RequestDate = value;
					this.SendPropertyChanged("RequestDate");
					this.OnRequestDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResponseLog")]
	public partial class ResponseLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TransactionID;
		
		private System.Nullable<int> _RequestID;
		
		private string _ResponseMessage;
		
		private System.Nullable<System.DateTime> _ResponseDate;
		
		private string _ResponseStatus;
		
		private string _ErrorMessage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTransactionIDChanging(System.Nullable<int> value);
    partial void OnTransactionIDChanged();
    partial void OnRequestIDChanging(System.Nullable<int> value);
    partial void OnRequestIDChanged();
    partial void OnResponseMessageChanging(string value);
    partial void OnResponseMessageChanged();
    partial void OnResponseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnResponseDateChanged();
    partial void OnResponseStatusChanging(string value);
    partial void OnResponseStatusChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    #endregion
		
		public ResponseLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="Int")]
		public System.Nullable<int> TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestID", DbType="Int")]
		public System.Nullable<int> RequestID
		{
			get
			{
				return this._RequestID;
			}
			set
			{
				if ((this._RequestID != value))
				{
					this.OnRequestIDChanging(value);
					this.SendPropertyChanging();
					this._RequestID = value;
					this.SendPropertyChanged("RequestID");
					this.OnRequestIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseMessage", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ResponseMessage
		{
			get
			{
				return this._ResponseMessage;
			}
			set
			{
				if ((this._ResponseMessage != value))
				{
					this.OnResponseMessageChanging(value);
					this.SendPropertyChanging();
					this._ResponseMessage = value;
					this.SendPropertyChanged("ResponseMessage");
					this.OnResponseMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ResponseDate
		{
			get
			{
				return this._ResponseDate;
			}
			set
			{
				if ((this._ResponseDate != value))
				{
					this.OnResponseDateChanging(value);
					this.SendPropertyChanging();
					this._ResponseDate = value;
					this.SendPropertyChanged("ResponseDate");
					this.OnResponseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseStatus", DbType="VarChar(50)")]
		public string ResponseStatus
		{
			get
			{
				return this._ResponseStatus;
			}
			set
			{
				if ((this._ResponseStatus != value))
				{
					this.OnResponseStatusChanging(value);
					this.SendPropertyChanging();
					this._ResponseStatus = value;
					this.SendPropertyChanged("ResponseStatus");
					this.OnResponseStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubscribtionLog")]
	public partial class SubscribtionLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Message;
		
		private System.Nullable<System.DateTime> _DateReceived;
		
		private System.Nullable<int> _TransactionID;
		
		private System.Nullable<System.DateTime> _DateProcessed;
		
		private string _Status;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnDateReceivedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateReceivedChanged();
    partial void OnTransactionIDChanging(System.Nullable<int> value);
    partial void OnTransactionIDChanged();
    partial void OnDateProcessedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateProcessedChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public SubscribtionLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateReceived", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateReceived
		{
			get
			{
				return this._DateReceived;
			}
			set
			{
				if ((this._DateReceived != value))
				{
					this.OnDateReceivedChanging(value);
					this.SendPropertyChanging();
					this._DateReceived = value;
					this.SendPropertyChanged("DateReceived");
					this.OnDateReceivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="Int")]
		public System.Nullable<int> TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateProcessed", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateProcessed
		{
			get
			{
				return this._DateProcessed;
			}
			set
			{
				if ((this._DateProcessed != value))
				{
					this.OnDateProcessedChanging(value);
					this.SendPropertyChanging();
					this._DateProcessed = value;
					this.SendPropertyChanged("DateProcessed");
					this.OnDateProcessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AmountType")]
	public partial class AmountType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Code;
		
		private System.Nullable<double> _Multiplier;
		
		private EntitySet<TransactionLeg> _TransactionLegs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnMultiplierChanging(System.Nullable<double> value);
    partial void OnMultiplierChanged();
    #endregion
		
		public AmountType()
		{
			this._TransactionLegs = new EntitySet<TransactionLeg>(new Action<TransactionLeg>(this.attach_TransactionLegs), new Action<TransactionLeg>(this.detach_TransactionLegs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(5)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Multiplier", DbType="Float")]
		public System.Nullable<double> Multiplier
		{
			get
			{
				return this._Multiplier;
			}
			set
			{
				if ((this._Multiplier != value))
				{
					this.OnMultiplierChanging(value);
					this.SendPropertyChanging();
					this._Multiplier = value;
					this.SendPropertyChanged("Multiplier");
					this.OnMultiplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AmountType_TransactionLeg", Storage="_TransactionLegs", ThisKey="ID", OtherKey="AmountType")]
		public EntitySet<TransactionLeg> TransactionLegs
		{
			get
			{
				return this._TransactionLegs;
			}
			set
			{
				this._TransactionLegs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.AmountType1 = this;
		}
		
		private void detach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.AmountType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionLeg")]
	public partial class TransactionLeg : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TransactionID;
		
		private System.Nullable<System.DateTime> _ActionDate;
		
		private System.Nullable<int> _BuyerID;
		
		private System.Nullable<int> _SellerID;
		
		private System.Nullable<int> _BuyerCurrency;
		
		private System.Nullable<int> _SellerCurrency;
		
		private System.Nullable<double> _Amount;
		
		private System.Nullable<double> _Rate;
		
		private string _Term;
		
		private System.Nullable<int> _TransactionSide;
		
		private System.Nullable<int> _AmountType;
		
		private System.Nullable<double> _BuyerBrokerage;
		
		private System.Nullable<double> _SellerBrokerage;
		
		private System.Nullable<int> _BuyerPersonID;
		
		private System.Nullable<int> _SellerPersonID;
		
		private System.Nullable<double> _ForwardPoints;
		
		private EntityRef<AmountType> _AmountType1;
		
		private EntityRef<Bank> _Bank;
		
		private EntityRef<Bank> _Bank1;
		
		private EntityRef<BankUser> _BankUser;
		
		private EntityRef<BankUser> _BankUser1;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<Currency> _Currency1;
		
		private EntityRef<Side> _Side;
		
		private EntityRef<Transaction> _Transaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTransactionIDChanging(System.Nullable<int> value);
    partial void OnTransactionIDChanged();
    partial void OnActionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnActionDateChanged();
    partial void OnBuyerIDChanging(System.Nullable<int> value);
    partial void OnBuyerIDChanged();
    partial void OnSellerIDChanging(System.Nullable<int> value);
    partial void OnSellerIDChanged();
    partial void OnBuyerCurrencyChanging(System.Nullable<int> value);
    partial void OnBuyerCurrencyChanged();
    partial void OnSellerCurrencyChanging(System.Nullable<int> value);
    partial void OnSellerCurrencyChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnRateChanging(System.Nullable<double> value);
    partial void OnRateChanged();
    partial void OnTermChanging(string value);
    partial void OnTermChanged();
    partial void OnTransactionSideChanging(System.Nullable<int> value);
    partial void OnTransactionSideChanged();
    partial void OnAmountTypeChanging(System.Nullable<int> value);
    partial void OnAmountTypeChanged();
    partial void OnBuyerBrokerageChanging(System.Nullable<double> value);
    partial void OnBuyerBrokerageChanged();
    partial void OnSellerBrokerageChanging(System.Nullable<double> value);
    partial void OnSellerBrokerageChanged();
    partial void OnBuyerPersonIDChanging(System.Nullable<int> value);
    partial void OnBuyerPersonIDChanged();
    partial void OnSellerPersonIDChanging(System.Nullable<int> value);
    partial void OnSellerPersonIDChanged();
    partial void OnForwardPointsChanging(System.Nullable<double> value);
    partial void OnForwardPointsChanged();
    #endregion
		
		public TransactionLeg()
		{
			this._AmountType1 = default(EntityRef<AmountType>);
			this._Bank = default(EntityRef<Bank>);
			this._Bank1 = default(EntityRef<Bank>);
			this._BankUser = default(EntityRef<BankUser>);
			this._BankUser1 = default(EntityRef<BankUser>);
			this._Currency = default(EntityRef<Currency>);
			this._Currency1 = default(EntityRef<Currency>);
			this._Side = default(EntityRef<Side>);
			this._Transaction = default(EntityRef<Transaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="Int")]
		public System.Nullable<int> TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					if (this._Transaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ActionDate
		{
			get
			{
				return this._ActionDate;
			}
			set
			{
				if ((this._ActionDate != value))
				{
					this.OnActionDateChanging(value);
					this.SendPropertyChanging();
					this._ActionDate = value;
					this.SendPropertyChanged("ActionDate");
					this.OnActionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerID", DbType="Int")]
		public System.Nullable<int> BuyerID
		{
			get
			{
				return this._BuyerID;
			}
			set
			{
				if ((this._BuyerID != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerIDChanging(value);
					this.SendPropertyChanging();
					this._BuyerID = value;
					this.SendPropertyChanged("BuyerID");
					this.OnBuyerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerID", DbType="Int")]
		public System.Nullable<int> SellerID
		{
			get
			{
				return this._SellerID;
			}
			set
			{
				if ((this._SellerID != value))
				{
					if (this._Bank1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerIDChanging(value);
					this.SendPropertyChanging();
					this._SellerID = value;
					this.SendPropertyChanged("SellerID");
					this.OnSellerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerCurrency", DbType="Int")]
		public System.Nullable<int> BuyerCurrency
		{
			get
			{
				return this._BuyerCurrency;
			}
			set
			{
				if ((this._BuyerCurrency != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerCurrencyChanging(value);
					this.SendPropertyChanging();
					this._BuyerCurrency = value;
					this.SendPropertyChanged("BuyerCurrency");
					this.OnBuyerCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerCurrency", DbType="Int")]
		public System.Nullable<int> SellerCurrency
		{
			get
			{
				return this._SellerCurrency;
			}
			set
			{
				if ((this._SellerCurrency != value))
				{
					if (this._Currency1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerCurrencyChanging(value);
					this.SendPropertyChanging();
					this._SellerCurrency = value;
					this.SendPropertyChanged("SellerCurrency");
					this.OnSellerCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Float")]
		public System.Nullable<double> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Term", DbType="VarChar(50)")]
		public string Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this.OnTermChanging(value);
					this.SendPropertyChanging();
					this._Term = value;
					this.SendPropertyChanged("Term");
					this.OnTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionSide", DbType="Int")]
		public System.Nullable<int> TransactionSide
		{
			get
			{
				return this._TransactionSide;
			}
			set
			{
				if ((this._TransactionSide != value))
				{
					if (this._Side.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionSideChanging(value);
					this.SendPropertyChanging();
					this._TransactionSide = value;
					this.SendPropertyChanged("TransactionSide");
					this.OnTransactionSideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountType", DbType="Int")]
		public System.Nullable<int> AmountType
		{
			get
			{
				return this._AmountType;
			}
			set
			{
				if ((this._AmountType != value))
				{
					if (this._AmountType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAmountTypeChanging(value);
					this.SendPropertyChanging();
					this._AmountType = value;
					this.SendPropertyChanged("AmountType");
					this.OnAmountTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerBrokerage", DbType="Float")]
		public System.Nullable<double> BuyerBrokerage
		{
			get
			{
				return this._BuyerBrokerage;
			}
			set
			{
				if ((this._BuyerBrokerage != value))
				{
					this.OnBuyerBrokerageChanging(value);
					this.SendPropertyChanging();
					this._BuyerBrokerage = value;
					this.SendPropertyChanged("BuyerBrokerage");
					this.OnBuyerBrokerageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerBrokerage", DbType="Float")]
		public System.Nullable<double> SellerBrokerage
		{
			get
			{
				return this._SellerBrokerage;
			}
			set
			{
				if ((this._SellerBrokerage != value))
				{
					this.OnSellerBrokerageChanging(value);
					this.SendPropertyChanging();
					this._SellerBrokerage = value;
					this.SendPropertyChanged("SellerBrokerage");
					this.OnSellerBrokerageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerPersonID", DbType="Int")]
		public System.Nullable<int> BuyerPersonID
		{
			get
			{
				return this._BuyerPersonID;
			}
			set
			{
				if ((this._BuyerPersonID != value))
				{
					if (this._BankUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuyerPersonIDChanging(value);
					this.SendPropertyChanging();
					this._BuyerPersonID = value;
					this.SendPropertyChanged("BuyerPersonID");
					this.OnBuyerPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerPersonID", DbType="Int")]
		public System.Nullable<int> SellerPersonID
		{
			get
			{
				return this._SellerPersonID;
			}
			set
			{
				if ((this._SellerPersonID != value))
				{
					if (this._BankUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSellerPersonIDChanging(value);
					this.SendPropertyChanging();
					this._SellerPersonID = value;
					this.SendPropertyChanged("SellerPersonID");
					this.OnSellerPersonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForwardPoints", DbType="Float")]
		public System.Nullable<double> ForwardPoints
		{
			get
			{
				return this._ForwardPoints;
			}
			set
			{
				if ((this._ForwardPoints != value))
				{
					this.OnForwardPointsChanging(value);
					this.SendPropertyChanging();
					this._ForwardPoints = value;
					this.SendPropertyChanged("ForwardPoints");
					this.OnForwardPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AmountType_TransactionLeg", Storage="_AmountType1", ThisKey="AmountType", OtherKey="ID", IsForeignKey=true)]
		public AmountType AmountType1
		{
			get
			{
				return this._AmountType1.Entity;
			}
			set
			{
				AmountType previousValue = this._AmountType1.Entity;
				if (((previousValue != value) 
							|| (this._AmountType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AmountType1.Entity = null;
						previousValue.TransactionLegs.Remove(this);
					}
					this._AmountType1.Entity = value;
					if ((value != null))
					{
						value.TransactionLegs.Add(this);
						this._AmountType = value.ID;
					}
					else
					{
						this._AmountType = default(Nullable<int>);
					}
					this.SendPropertyChanged("AmountType1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_TransactionLeg", Storage="_Bank", ThisKey="BuyerID", OtherKey="ID", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.TransactionLegs.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.TransactionLegs.Add(this);
						this._BuyerID = value.ID;
					}
					else
					{
						this._BuyerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_TransactionLeg1", Storage="_Bank1", ThisKey="SellerID", OtherKey="ID", IsForeignKey=true)]
		public Bank Bank1
		{
			get
			{
				return this._Bank1.Entity;
			}
			set
			{
				Bank previousValue = this._Bank1.Entity;
				if (((previousValue != value) 
							|| (this._Bank1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank1.Entity = null;
						previousValue.TransactionLegs1.Remove(this);
					}
					this._Bank1.Entity = value;
					if ((value != null))
					{
						value.TransactionLegs1.Add(this);
						this._SellerID = value.ID;
					}
					else
					{
						this._SellerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bank1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankUser_TransactionLeg", Storage="_BankUser", ThisKey="BuyerPersonID", OtherKey="ID", IsForeignKey=true)]
		public BankUser BankUser
		{
			get
			{
				return this._BankUser.Entity;
			}
			set
			{
				BankUser previousValue = this._BankUser.Entity;
				if (((previousValue != value) 
							|| (this._BankUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankUser.Entity = null;
						previousValue.TransactionLegs.Remove(this);
					}
					this._BankUser.Entity = value;
					if ((value != null))
					{
						value.TransactionLegs.Add(this);
						this._BuyerPersonID = value.ID;
					}
					else
					{
						this._BuyerPersonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BankUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BankUser_TransactionLeg1", Storage="_BankUser1", ThisKey="SellerPersonID", OtherKey="ID", IsForeignKey=true)]
		public BankUser BankUser1
		{
			get
			{
				return this._BankUser1.Entity;
			}
			set
			{
				BankUser previousValue = this._BankUser1.Entity;
				if (((previousValue != value) 
							|| (this._BankUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BankUser1.Entity = null;
						previousValue.TransactionLegs1.Remove(this);
					}
					this._BankUser1.Entity = value;
					if ((value != null))
					{
						value.TransactionLegs1.Add(this);
						this._SellerPersonID = value.ID;
					}
					else
					{
						this._SellerPersonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("BankUser1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_TransactionLeg", Storage="_Currency", ThisKey="BuyerCurrency", OtherKey="ID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.TransactionLegs.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.TransactionLegs.Add(this);
						this._BuyerCurrency = value.ID;
					}
					else
					{
						this._BuyerCurrency = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_TransactionLeg1", Storage="_Currency1", ThisKey="SellerCurrency", OtherKey="ID", IsForeignKey=true)]
		public Currency Currency1
		{
			get
			{
				return this._Currency1.Entity;
			}
			set
			{
				Currency previousValue = this._Currency1.Entity;
				if (((previousValue != value) 
							|| (this._Currency1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency1.Entity = null;
						previousValue.TransactionLegs1.Remove(this);
					}
					this._Currency1.Entity = value;
					if ((value != null))
					{
						value.TransactionLegs1.Add(this);
						this._SellerCurrency = value.ID;
					}
					else
					{
						this._SellerCurrency = default(Nullable<int>);
					}
					this.SendPropertyChanged("Currency1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Side_TransactionLeg", Storage="_Side", ThisKey="TransactionSide", OtherKey="ID", IsForeignKey=true)]
		public Side Side
		{
			get
			{
				return this._Side.Entity;
			}
			set
			{
				Side previousValue = this._Side.Entity;
				if (((previousValue != value) 
							|| (this._Side.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Side.Entity = null;
						previousValue.TransactionLegs.Remove(this);
					}
					this._Side.Entity = value;
					if ((value != null))
					{
						value.TransactionLegs.Add(this);
						this._TransactionSide = value.ID;
					}
					else
					{
						this._TransactionSide = default(Nullable<int>);
					}
					this.SendPropertyChanged("Side");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_TransactionLeg", Storage="_Transaction", ThisKey="TransactionID", OtherKey="ID", IsForeignKey=true)]
		public Transaction Transaction
		{
			get
			{
				return this._Transaction.Entity;
			}
			set
			{
				Transaction previousValue = this._Transaction.Entity;
				if (((previousValue != value) 
							|| (this._Transaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transaction.Entity = null;
						previousValue.TransactionLegs.Remove(this);
					}
					this._Transaction.Entity = value;
					if ((value != null))
					{
						value.TransactionLegs.Add(this);
						this._TransactionID = value.ID;
					}
					else
					{
						this._TransactionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Transaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TermDates")]
	public partial class TermDate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TermID;
		
		private System.Nullable<System.DateTime> _ConfigDate;
		
		private System.Nullable<System.DateTime> _ValueDate;
		
		private EntityRef<Term> _Term;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTermIDChanging(System.Nullable<int> value);
    partial void OnTermIDChanged();
    partial void OnConfigDateChanging(System.Nullable<System.DateTime> value);
    partial void OnConfigDateChanged();
    partial void OnValueDateChanging(System.Nullable<System.DateTime> value);
    partial void OnValueDateChanged();
    #endregion
		
		public TermDate()
		{
			this._Term = default(EntityRef<Term>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermID", DbType="Int")]
		public System.Nullable<int> TermID
		{
			get
			{
				return this._TermID;
			}
			set
			{
				if ((this._TermID != value))
				{
					if (this._Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIDChanging(value);
					this.SendPropertyChanging();
					this._TermID = value;
					this.SendPropertyChanged("TermID");
					this.OnTermIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConfigDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ConfigDate
		{
			get
			{
				return this._ConfigDate;
			}
			set
			{
				if ((this._ConfigDate != value))
				{
					this.OnConfigDateChanging(value);
					this.SendPropertyChanging();
					this._ConfigDate = value;
					this.SendPropertyChanged("ConfigDate");
					this.OnConfigDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ValueDate
		{
			get
			{
				return this._ValueDate;
			}
			set
			{
				if ((this._ValueDate != value))
				{
					this.OnValueDateChanging(value);
					this.SendPropertyChanging();
					this._ValueDate = value;
					this.SendPropertyChanged("ValueDate");
					this.OnValueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Term_TermDate", Storage="_Term", ThisKey="TermID", OtherKey="ID", IsForeignKey=true)]
		public Term Term
		{
			get
			{
				return this._Term.Entity;
			}
			set
			{
				Term previousValue = this._Term.Entity;
				if (((previousValue != value) 
							|| (this._Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Term.Entity = null;
						previousValue.TermDates.Remove(this);
					}
					this._Term.Entity = value;
					if ((value != null))
					{
						value.TermDates.Add(this);
						this._TermID = value.ID;
					}
					else
					{
						this._TermID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Term");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Terms")]
	public partial class Term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Increment;
		
		private EntitySet<TermDate> _TermDates;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIncrementChanging(System.Nullable<int> value);
    partial void OnIncrementChanged();
    #endregion
		
		public Term()
		{
			this._TermDates = new EntitySet<TermDate>(new Action<TermDate>(this.attach_TermDates), new Action<TermDate>(this.detach_TermDates));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Increment", DbType="Int")]
		public System.Nullable<int> Increment
		{
			get
			{
				return this._Increment;
			}
			set
			{
				if ((this._Increment != value))
				{
					this.OnIncrementChanging(value);
					this.SendPropertyChanging();
					this._Increment = value;
					this.SendPropertyChanged("Increment");
					this.OnIncrementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Term_TermDate", Storage="_TermDates", ThisKey="ID", OtherKey="TermID")]
		public EntitySet<TermDate> TermDates
		{
			get
			{
				return this._TermDates;
			}
			set
			{
				this._TermDates.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TermDates(TermDate entity)
		{
			this.SendPropertyChanging();
			entity.Term = this;
		}
		
		private void detach_TermDates(TermDate entity)
		{
			this.SendPropertyChanging();
			entity.Term = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrencyScale")]
	public partial class CurrencyScale : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _firstCurrency;
		
		private string _secondCurrency;
		
		private System.Nullable<int> _forwardScalePnts;
		
		private System.Nullable<int> _inverseScalePnts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnfirstCurrencyChanging(string value);
    partial void OnfirstCurrencyChanged();
    partial void OnsecondCurrencyChanging(string value);
    partial void OnsecondCurrencyChanged();
    partial void OnforwardScalePntsChanging(System.Nullable<int> value);
    partial void OnforwardScalePntsChanged();
    partial void OninverseScalePntsChanging(System.Nullable<int> value);
    partial void OninverseScalePntsChanged();
    #endregion
		
		public CurrencyScale()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstCurrency", DbType="VarChar(5)")]
		public string firstCurrency
		{
			get
			{
				return this._firstCurrency;
			}
			set
			{
				if ((this._firstCurrency != value))
				{
					this.OnfirstCurrencyChanging(value);
					this.SendPropertyChanging();
					this._firstCurrency = value;
					this.SendPropertyChanged("firstCurrency");
					this.OnfirstCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_secondCurrency", DbType="VarChar(5)")]
		public string secondCurrency
		{
			get
			{
				return this._secondCurrency;
			}
			set
			{
				if ((this._secondCurrency != value))
				{
					this.OnsecondCurrencyChanging(value);
					this.SendPropertyChanging();
					this._secondCurrency = value;
					this.SendPropertyChanged("secondCurrency");
					this.OnsecondCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_forwardScalePnts", DbType="Int")]
		public System.Nullable<int> forwardScalePnts
		{
			get
			{
				return this._forwardScalePnts;
			}
			set
			{
				if ((this._forwardScalePnts != value))
				{
					this.OnforwardScalePntsChanging(value);
					this.SendPropertyChanging();
					this._forwardScalePnts = value;
					this.SendPropertyChanged("forwardScalePnts");
					this.OnforwardScalePntsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inverseScalePnts", DbType="Int")]
		public System.Nullable<int> inverseScalePnts
		{
			get
			{
				return this._inverseScalePnts;
			}
			set
			{
				if ((this._inverseScalePnts != value))
				{
					this.OninverseScalePntsChanging(value);
					this.SendPropertyChanging();
					this._inverseScalePnts = value;
					this.SendPropertyChanged("inverseScalePnts");
					this.OninverseScalePntsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Transaction]")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ProductType;
		
		private System.Nullable<System.DateTime> _TransactionDate;
		
		private string _TransactionReference;
		
		private System.Nullable<int> _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _Message;
		
		private string _Description;
		
		private System.Nullable<int> _Status;
		
		private string _RTNSReference;
		
		private string _SubStatus;
		
		private System.Nullable<int> _BaseCurrency;
		
		private System.Nullable<int> _DealtCurrency;
		
		private System.Nullable<int> _Scale;
		
		private System.Nullable<System.DateTime> _spotdate;
		
		private EntitySet<TransactionLeg> _TransactionLegs;
		
		private EntityRef<TransactionFix> _TransactionFixes;
		
		private EntityRef<TransactionMM> _TransactionMMs;
		
		private EntityRef<Product> _Product;
		
		private EntityRef<Status> _Status1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnProductTypeChanging(System.Nullable<int> value);
    partial void OnProductTypeChanged();
    partial void OnTransactionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnTransactionDateChanged();
    partial void OnTransactionReferenceChanging(string value);
    partial void OnTransactionReferenceChanged();
    partial void OnCreatedByChanging(System.Nullable<int> value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnStatusChanging(System.Nullable<int> value);
    partial void OnStatusChanged();
    partial void OnRTNSReferenceChanging(string value);
    partial void OnRTNSReferenceChanged();
    partial void OnSubStatusChanging(string value);
    partial void OnSubStatusChanged();
    partial void OnBaseCurrencyChanging(System.Nullable<int> value);
    partial void OnBaseCurrencyChanged();
    partial void OnDealtCurrencyChanging(System.Nullable<int> value);
    partial void OnDealtCurrencyChanged();
    partial void OnScaleChanging(System.Nullable<int> value);
    partial void OnScaleChanged();
    partial void OnspotdateChanging(System.Nullable<System.DateTime> value);
    partial void OnspotdateChanged();
    #endregion
		
		public Transaction()
		{
			this._TransactionLegs = new EntitySet<TransactionLeg>(new Action<TransactionLeg>(this.attach_TransactionLegs), new Action<TransactionLeg>(this.detach_TransactionLegs));
			this._TransactionFixes = default(EntityRef<TransactionFix>);
			this._TransactionMMs = default(EntityRef<TransactionMM>);
			this._Product = default(EntityRef<Product>);
			this._Status1 = default(EntityRef<Status>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductType", DbType="Int")]
		public System.Nullable<int> ProductType
		{
			get
			{
				return this._ProductType;
			}
			set
			{
				if ((this._ProductType != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductTypeChanging(value);
					this.SendPropertyChanging();
					this._ProductType = value;
					this.SendPropertyChanged("ProductType");
					this.OnProductTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionReference", DbType="VarChar(50)")]
		public string TransactionReference
		{
			get
			{
				return this._TransactionReference;
			}
			set
			{
				if ((this._TransactionReference != value))
				{
					this.OnTransactionReferenceChanging(value);
					this.SendPropertyChanging();
					this._TransactionReference = value;
					this.SendPropertyChanged("TransactionReference");
					this.OnTransactionReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="Int")]
		public System.Nullable<int> CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int")]
		public System.Nullable<int> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					if (this._Status1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RTNSReference", DbType="VarChar(50)")]
		public string RTNSReference
		{
			get
			{
				return this._RTNSReference;
			}
			set
			{
				if ((this._RTNSReference != value))
				{
					this.OnRTNSReferenceChanging(value);
					this.SendPropertyChanging();
					this._RTNSReference = value;
					this.SendPropertyChanged("RTNSReference");
					this.OnRTNSReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubStatus", DbType="VarChar(50)")]
		public string SubStatus
		{
			get
			{
				return this._SubStatus;
			}
			set
			{
				if ((this._SubStatus != value))
				{
					this.OnSubStatusChanging(value);
					this.SendPropertyChanging();
					this._SubStatus = value;
					this.SendPropertyChanged("SubStatus");
					this.OnSubStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseCurrency", DbType="Int")]
		public System.Nullable<int> BaseCurrency
		{
			get
			{
				return this._BaseCurrency;
			}
			set
			{
				if ((this._BaseCurrency != value))
				{
					this.OnBaseCurrencyChanging(value);
					this.SendPropertyChanging();
					this._BaseCurrency = value;
					this.SendPropertyChanged("BaseCurrency");
					this.OnBaseCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DealtCurrency", DbType="Int")]
		public System.Nullable<int> DealtCurrency
		{
			get
			{
				return this._DealtCurrency;
			}
			set
			{
				if ((this._DealtCurrency != value))
				{
					this.OnDealtCurrencyChanging(value);
					this.SendPropertyChanging();
					this._DealtCurrency = value;
					this.SendPropertyChanged("DealtCurrency");
					this.OnDealtCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Scale", DbType="Int")]
		public System.Nullable<int> Scale
		{
			get
			{
				return this._Scale;
			}
			set
			{
				if ((this._Scale != value))
				{
					this.OnScaleChanging(value);
					this.SendPropertyChanging();
					this._Scale = value;
					this.SendPropertyChanged("Scale");
					this.OnScaleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spotdate", DbType="DateTime")]
		public System.Nullable<System.DateTime> spotdate
		{
			get
			{
				return this._spotdate;
			}
			set
			{
				if ((this._spotdate != value))
				{
					this.OnspotdateChanging(value);
					this.SendPropertyChanging();
					this._spotdate = value;
					this.SendPropertyChanged("spotdate");
					this.OnspotdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_TransactionLeg", Storage="_TransactionLegs", ThisKey="ID", OtherKey="TransactionID")]
		public EntitySet<TransactionLeg> TransactionLegs
		{
			get
			{
				return this._TransactionLegs;
			}
			set
			{
				this._TransactionLegs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_TransactionFix", Storage="_TransactionFixes", ThisKey="ID", OtherKey="TransactionID", IsUnique=true, IsForeignKey=false)]
		public TransactionFix TransactionFixes
		{
			get
			{
				return this._TransactionFixes.Entity;
			}
			set
			{
				TransactionFix previousValue = this._TransactionFixes.Entity;
				if (((previousValue != value) 
							|| (this._TransactionFixes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransactionFixes.Entity = null;
						previousValue.Transaction = null;
					}
					this._TransactionFixes.Entity = value;
					if ((value != null))
					{
						value.Transaction = this;
					}
					this.SendPropertyChanged("TransactionFixes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_TransactionMM", Storage="_TransactionMMs", ThisKey="ID", OtherKey="TransactionID", IsUnique=true, IsForeignKey=false)]
		public TransactionMM TransactionMMs
		{
			get
			{
				return this._TransactionMMs.Entity;
			}
			set
			{
				TransactionMM previousValue = this._TransactionMMs.Entity;
				if (((previousValue != value) 
							|| (this._TransactionMMs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TransactionMMs.Entity = null;
						previousValue.Transaction = null;
					}
					this._TransactionMMs.Entity = value;
					if ((value != null))
					{
						value.Transaction = this;
					}
					this.SendPropertyChanged("TransactionMMs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Transaction", Storage="_Product", ThisKey="ProductType", OtherKey="ID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._ProductType = value.ID;
					}
					else
					{
						this._ProductType = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Status_Transaction", Storage="_Status1", ThisKey="Status", OtherKey="ID", IsForeignKey=true)]
		public Status Status1
		{
			get
			{
				return this._Status1.Entity;
			}
			set
			{
				Status previousValue = this._Status1.Entity;
				if (((previousValue != value) 
							|| (this._Status1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Status1.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Status1.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._Status = value.ID;
					}
					else
					{
						this._Status = default(Nullable<int>);
					}
					this.SendPropertyChanged("Status1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Transaction = this;
		}
		
		private void detach_TransactionLegs(TransactionLeg entity)
		{
			this.SendPropertyChanging();
			entity.Transaction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.vwDealStatus")]
	public partial class vwDealStatus
	{
		
		private int _ID;
		
		private string _TransactionReference;
		
		private string _Description;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _TransactionDate;
		
		private string _status;
		
		private string _BuyerName;
		
		private string _SellerName;
		
		private System.Nullable<int> _BuyerID;
		
		private System.Nullable<int> _SellerID;
		
		public vwDealStatus()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionReference", DbType="VarChar(50)")]
		public string TransactionReference
		{
			get
			{
				return this._TransactionReference;
			}
			set
			{
				if ((this._TransactionReference != value))
				{
					this._TransactionReference = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this._TransactionDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(50)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this._status = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerName", DbType="VarChar(200)")]
		public string BuyerName
		{
			get
			{
				return this._BuyerName;
			}
			set
			{
				if ((this._BuyerName != value))
				{
					this._BuyerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerName", DbType="VarChar(200)")]
		public string SellerName
		{
			get
			{
				return this._SellerName;
			}
			set
			{
				if ((this._SellerName != value))
				{
					this._SellerName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerID", DbType="Int")]
		public System.Nullable<int> BuyerID
		{
			get
			{
				return this._BuyerID;
			}
			set
			{
				if ((this._BuyerID != value))
				{
					this._BuyerID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerID", DbType="Int")]
		public System.Nullable<int> SellerID
		{
			get
			{
				return this._SellerID;
			}
			set
			{
				if ((this._SellerID != value))
				{
					this._SellerID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FixingCentre")]
	public partial class FixingCentre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Code;
		
		private EntitySet<TransactionFix> _TransactionFixes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public FixingCentre()
		{
			this._TransactionFixes = new EntitySet<TransactionFix>(new Action<TransactionFix>(this.attach_TransactionFixes), new Action<TransactionFix>(this.detach_TransactionFixes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Varchar(500)", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="Varchar(50)", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixingCentre_TransactionFix", Storage="_TransactionFixes", ThisKey="ID", OtherKey="FixingCentreID")]
		public EntitySet<TransactionFix> TransactionFixes
		{
			get
			{
				return this._TransactionFixes;
			}
			set
			{
				this._TransactionFixes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionFixes(TransactionFix entity)
		{
			this.SendPropertyChanging();
			entity.FixingCentre = this;
		}
		
		private void detach_TransactionFixes(TransactionFix entity)
		{
			this.SendPropertyChanging();
			entity.FixingCentre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionFix")]
	public partial class TransactionFix : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TransactionID;
		
		private System.Nullable<int> _FixingCentreID;
		
		private int _FixingDays;
		
		private System.DateTime _FixingDate;
		
		private int _SettlementCurrency;
		
		private EntityRef<Transaction> _Transaction;
		
		private EntityRef<FixingCentre> _FixingCentre;
		
		private EntityRef<Currency> _Currency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTransactionIDChanging(System.Nullable<int> value);
    partial void OnTransactionIDChanged();
    partial void OnFixingCentreIDChanging(System.Nullable<int> value);
    partial void OnFixingCentreIDChanged();
    partial void OnFixingDaysChanging(int value);
    partial void OnFixingDaysChanged();
    partial void OnFixingDateChanging(System.DateTime value);
    partial void OnFixingDateChanged();
    partial void OnSettlementCurrencyChanging(int value);
    partial void OnSettlementCurrencyChanged();
    #endregion
		
		public TransactionFix()
		{
			this._Transaction = default(EntityRef<Transaction>);
			this._FixingCentre = default(EntityRef<FixingCentre>);
			this._Currency = default(EntityRef<Currency>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="Int")]
		public System.Nullable<int> TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					if (this._Transaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixingCentreID", DbType="Int")]
		public System.Nullable<int> FixingCentreID
		{
			get
			{
				return this._FixingCentreID;
			}
			set
			{
				if ((this._FixingCentreID != value))
				{
					if (this._FixingCentre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFixingCentreIDChanging(value);
					this.SendPropertyChanging();
					this._FixingCentreID = value;
					this.SendPropertyChanged("FixingCentreID");
					this.OnFixingCentreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixingDays", DbType="Int")]
		public int FixingDays
		{
			get
			{
				return this._FixingDays;
			}
			set
			{
				if ((this._FixingDays != value))
				{
					this.OnFixingDaysChanging(value);
					this.SendPropertyChanging();
					this._FixingDays = value;
					this.SendPropertyChanged("FixingDays");
					this.OnFixingDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FixingDate", DbType="DateTime")]
		public System.DateTime FixingDate
		{
			get
			{
				return this._FixingDate;
			}
			set
			{
				if ((this._FixingDate != value))
				{
					this.OnFixingDateChanging(value);
					this.SendPropertyChanging();
					this._FixingDate = value;
					this.SendPropertyChanged("FixingDate");
					this.OnFixingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettlementCurrency", DbType="Int")]
		public int SettlementCurrency
		{
			get
			{
				return this._SettlementCurrency;
			}
			set
			{
				if ((this._SettlementCurrency != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSettlementCurrencyChanging(value);
					this.SendPropertyChanging();
					this._SettlementCurrency = value;
					this.SendPropertyChanged("SettlementCurrency");
					this.OnSettlementCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_TransactionFix", Storage="_Transaction", ThisKey="TransactionID", OtherKey="ID", IsForeignKey=true)]
		public Transaction Transaction
		{
			get
			{
				return this._Transaction.Entity;
			}
			set
			{
				Transaction previousValue = this._Transaction.Entity;
				if (((previousValue != value) 
							|| (this._Transaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transaction.Entity = null;
						previousValue.TransactionFixes = null;
					}
					this._Transaction.Entity = value;
					if ((value != null))
					{
						value.TransactionFixes = this;
						this._TransactionID = value.ID;
					}
					else
					{
						this._TransactionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Transaction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FixingCentre_TransactionFix", Storage="_FixingCentre", ThisKey="FixingCentreID", OtherKey="ID", IsForeignKey=true)]
		public FixingCentre FixingCentre
		{
			get
			{
				return this._FixingCentre.Entity;
			}
			set
			{
				FixingCentre previousValue = this._FixingCentre.Entity;
				if (((previousValue != value) 
							|| (this._FixingCentre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FixingCentre.Entity = null;
						previousValue.TransactionFixes.Remove(this);
					}
					this._FixingCentre.Entity = value;
					if ((value != null))
					{
						value.TransactionFixes.Add(this);
						this._FixingCentreID = value.ID;
					}
					else
					{
						this._FixingCentreID = default(Nullable<int>);
					}
					this.SendPropertyChanged("FixingCentre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_TransactionFix", Storage="_Currency", ThisKey="SettlementCurrency", OtherKey="ID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.TransactionFixes.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.TransactionFixes.Add(this);
						this._SettlementCurrency = value.ID;
					}
					else
					{
						this._SettlementCurrency = default(int);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class PaymentFrequencyLookup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<TransactionMM> _TransactionMMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PaymentFrequencyLookup()
		{
			this._TransactionMMs = new EntitySet<TransactionMM>(new Action<TransactionMM>(this.attach_TransactionMMs), new Action<TransactionMM>(this.detach_TransactionMMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentFrequencyLookup_TransactionMM", Storage="_TransactionMMs", ThisKey="ID", OtherKey="PaymentFrequency")]
		public EntitySet<TransactionMM> TransactionMMs
		{
			get
			{
				return this._TransactionMMs;
			}
			set
			{
				this._TransactionMMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TransactionMMs(TransactionMM entity)
		{
			this.SendPropertyChanging();
			entity.PaymentFrequencyLookup = this;
		}
		
		private void detach_TransactionMMs(TransactionMM entity)
		{
			this.SendPropertyChanging();
			entity.PaymentFrequencyLookup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="")]
	public partial class TransactionMM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TransactionID;
		
		private System.Nullable<int> _DaysPerYear;
		
		private System.Nullable<int> _PaymentFrequency;
		
		private System.Nullable<double> _InterestAmount;
		
		private EntityRef<PaymentFrequencyLookup> _PaymentFrequencyLookup;
		
		private EntityRef<Transaction> _Transaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTransactionIDChanging(System.Nullable<int> value);
    partial void OnTransactionIDChanged();
    partial void OnDaysPerYearChanging(System.Nullable<int> value);
    partial void OnDaysPerYearChanged();
    partial void OnPaymentFrequencyChanging(System.Nullable<int> value);
    partial void OnPaymentFrequencyChanged();
    partial void OnInterestAmountChanging(System.Nullable<double> value);
    partial void OnInterestAmountChanged();
    #endregion
		
		public TransactionMM()
		{
			this._PaymentFrequencyLookup = default(EntityRef<PaymentFrequencyLookup>);
			this._Transaction = default(EntityRef<Transaction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", DbType="Int")]
		public System.Nullable<int> TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					if (this._Transaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DaysPerYear", DbType="Int")]
		public System.Nullable<int> DaysPerYear
		{
			get
			{
				return this._DaysPerYear;
			}
			set
			{
				if ((this._DaysPerYear != value))
				{
					this.OnDaysPerYearChanging(value);
					this.SendPropertyChanging();
					this._DaysPerYear = value;
					this.SendPropertyChanged("DaysPerYear");
					this.OnDaysPerYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentFrequency", DbType="Int")]
		public System.Nullable<int> PaymentFrequency
		{
			get
			{
				return this._PaymentFrequency;
			}
			set
			{
				if ((this._PaymentFrequency != value))
				{
					if (this._PaymentFrequencyLookup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentFrequencyChanging(value);
					this.SendPropertyChanging();
					this._PaymentFrequency = value;
					this.SendPropertyChanged("PaymentFrequency");
					this.OnPaymentFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InterestAmount", DbType="Float")]
		public System.Nullable<double> InterestAmount
		{
			get
			{
				return this._InterestAmount;
			}
			set
			{
				if ((this._InterestAmount != value))
				{
					this.OnInterestAmountChanging(value);
					this.SendPropertyChanging();
					this._InterestAmount = value;
					this.SendPropertyChanged("InterestAmount");
					this.OnInterestAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentFrequencyLookup_TransactionMM", Storage="_PaymentFrequencyLookup", ThisKey="PaymentFrequency", OtherKey="ID", IsForeignKey=true)]
		public PaymentFrequencyLookup PaymentFrequencyLookup
		{
			get
			{
				return this._PaymentFrequencyLookup.Entity;
			}
			set
			{
				PaymentFrequencyLookup previousValue = this._PaymentFrequencyLookup.Entity;
				if (((previousValue != value) 
							|| (this._PaymentFrequencyLookup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentFrequencyLookup.Entity = null;
						previousValue.TransactionMMs.Remove(this);
					}
					this._PaymentFrequencyLookup.Entity = value;
					if ((value != null))
					{
						value.TransactionMMs.Add(this);
						this._PaymentFrequency = value.ID;
					}
					else
					{
						this._PaymentFrequency = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaymentFrequencyLookup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_TransactionMM", Storage="_Transaction", ThisKey="TransactionID", OtherKey="ID", IsForeignKey=true)]
		public Transaction Transaction
		{
			get
			{
				return this._Transaction.Entity;
			}
			set
			{
				Transaction previousValue = this._Transaction.Entity;
				if (((previousValue != value) 
							|| (this._Transaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transaction.Entity = null;
						previousValue.TransactionMMs = null;
					}
					this._Transaction.Entity = value;
					if ((value != null))
					{
						value.TransactionMMs = this;
						this._TransactionID = value.ID;
					}
					else
					{
						this._TransactionID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Transaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
